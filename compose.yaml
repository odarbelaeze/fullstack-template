services:
  proxy:
    build: ./proxy
    ports:
      - "8080:8080"
    command: ["nginx", "-g", "daemon off;"]
    develop:
      watch:
        - action: rebuild
          path: ./proxy/nginx.conf
    depends_on:
      ui:
        condition: service_healthy
      api:
        condition: service_healthy

  ui:
    build: ./ui
    command: ["npm", "run", "dev", "--", "--host", "0.0.0.0"]
    develop:
      watch:
        - action: sync
          path: ./ui/src
          target: /app/src
        - action: rebuild
          path: ./ui/package.json
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5173/ || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  api:
    build: ./api
    command:
      [
        "uv",
        "run",
        "fastapi",
        "dev",
        "--host",
        "0.0.0.0",
        "--port",
        "8080",
        "src/example/api.py",
      ]
    develop:
      watch:
        - action: sync
          path: ./api/src
          target: /app/src
        - action: rebuild
          path: ./api/pyproject.toml
    depends_on:
      db:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully
    environment:
      EXAMPLE_DB_DSN: "postgresql://user:password@db/example?sslmode=disable"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/ping/ || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  db:
    image: "postgres:17.1-alpine"
    volumes:
      - dbdata:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: "user"
      POSTGRES_PASSWORD: "password"
      POSTGRES_DB: "example"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d example"]
      interval: 5s
      timeout: 5s
      retries: 5

  migrator:
    image: "migrate/migrate:v4.18.1"
    command:
      [
        "-verbose",
        "-path",
        "/migrations",
        "-database",
        "postgresql://user:password@db/example?sslmode=disable",
        "up",
      ]
    volumes:
      - "./migrations:/migrations"
    depends_on:
      db:
        condition: service_healthy

volumes:
  dbdata:
